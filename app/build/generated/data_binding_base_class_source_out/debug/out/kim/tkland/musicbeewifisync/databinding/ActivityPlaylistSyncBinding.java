// Generated by view binder compiler. Do not edit!
package kim.tkland.musicbeewifisync.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Guideline;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import kim.tkland.musicbeewifisync.R;

public final class ActivityPlaylistSyncBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView syncNoPlaylistsMessage;

  @NonNull
  public final TextView syncPlaylistsCountMessage;

  @NonNull
  public final CheckBox syncPlaylistsDeleteFiles;

  @NonNull
  public final Guideline syncPlaylistsHalfWidthGuideline;

  @NonNull
  public final Button syncPlaylistsPreviewButton;

  @NonNull
  public final TextView syncPlaylistsPrompt;

  @NonNull
  public final ListView syncPlaylistsSelector;

  @NonNull
  public final LinearLayout syncPlaylistsStartButton;

  @NonNull
  public final ImageView syncPlaylistsStartButtonImage;

  @NonNull
  public final TextView syncPlaylistsStartButtonText;

  private ActivityPlaylistSyncBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextView syncNoPlaylistsMessage, @NonNull TextView syncPlaylistsCountMessage,
      @NonNull CheckBox syncPlaylistsDeleteFiles,
      @NonNull Guideline syncPlaylistsHalfWidthGuideline,
      @NonNull Button syncPlaylistsPreviewButton, @NonNull TextView syncPlaylistsPrompt,
      @NonNull ListView syncPlaylistsSelector, @NonNull LinearLayout syncPlaylistsStartButton,
      @NonNull ImageView syncPlaylistsStartButtonImage,
      @NonNull TextView syncPlaylistsStartButtonText) {
    this.rootView = rootView;
    this.syncNoPlaylistsMessage = syncNoPlaylistsMessage;
    this.syncPlaylistsCountMessage = syncPlaylistsCountMessage;
    this.syncPlaylistsDeleteFiles = syncPlaylistsDeleteFiles;
    this.syncPlaylistsHalfWidthGuideline = syncPlaylistsHalfWidthGuideline;
    this.syncPlaylistsPreviewButton = syncPlaylistsPreviewButton;
    this.syncPlaylistsPrompt = syncPlaylistsPrompt;
    this.syncPlaylistsSelector = syncPlaylistsSelector;
    this.syncPlaylistsStartButton = syncPlaylistsStartButton;
    this.syncPlaylistsStartButtonImage = syncPlaylistsStartButtonImage;
    this.syncPlaylistsStartButtonText = syncPlaylistsStartButtonText;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityPlaylistSyncBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityPlaylistSyncBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_playlist_sync, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityPlaylistSyncBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.syncNoPlaylistsMessage;
      TextView syncNoPlaylistsMessage = ViewBindings.findChildViewById(rootView, id);
      if (syncNoPlaylistsMessage == null) {
        break missingId;
      }

      id = R.id.syncPlaylistsCountMessage;
      TextView syncPlaylistsCountMessage = ViewBindings.findChildViewById(rootView, id);
      if (syncPlaylistsCountMessage == null) {
        break missingId;
      }

      id = R.id.syncPlaylistsDeleteFiles;
      CheckBox syncPlaylistsDeleteFiles = ViewBindings.findChildViewById(rootView, id);
      if (syncPlaylistsDeleteFiles == null) {
        break missingId;
      }

      id = R.id.syncPlaylistsHalfWidthGuideline;
      Guideline syncPlaylistsHalfWidthGuideline = ViewBindings.findChildViewById(rootView, id);
      if (syncPlaylistsHalfWidthGuideline == null) {
        break missingId;
      }

      id = R.id.syncPlaylistsPreviewButton;
      Button syncPlaylistsPreviewButton = ViewBindings.findChildViewById(rootView, id);
      if (syncPlaylistsPreviewButton == null) {
        break missingId;
      }

      id = R.id.syncPlaylistsPrompt;
      TextView syncPlaylistsPrompt = ViewBindings.findChildViewById(rootView, id);
      if (syncPlaylistsPrompt == null) {
        break missingId;
      }

      id = R.id.syncPlaylistsSelector;
      ListView syncPlaylistsSelector = ViewBindings.findChildViewById(rootView, id);
      if (syncPlaylistsSelector == null) {
        break missingId;
      }

      id = R.id.syncPlaylistsStartButton;
      LinearLayout syncPlaylistsStartButton = ViewBindings.findChildViewById(rootView, id);
      if (syncPlaylistsStartButton == null) {
        break missingId;
      }

      id = R.id.syncPlaylistsStartButtonImage;
      ImageView syncPlaylistsStartButtonImage = ViewBindings.findChildViewById(rootView, id);
      if (syncPlaylistsStartButtonImage == null) {
        break missingId;
      }

      id = R.id.syncPlaylistsStartButtonText;
      TextView syncPlaylistsStartButtonText = ViewBindings.findChildViewById(rootView, id);
      if (syncPlaylistsStartButtonText == null) {
        break missingId;
      }

      return new ActivityPlaylistSyncBinding((ConstraintLayout) rootView, syncNoPlaylistsMessage,
          syncPlaylistsCountMessage, syncPlaylistsDeleteFiles, syncPlaylistsHalfWidthGuideline,
          syncPlaylistsPreviewButton, syncPlaylistsPrompt, syncPlaylistsSelector,
          syncPlaylistsStartButton, syncPlaylistsStartButtonImage, syncPlaylistsStartButtonText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
