// Generated by view binder compiler. Do not edit!
package kim.tkland.musicbeewifisync.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import kim.tkland.musicbeewifisync.R;

public final class ActivitySyncStatusBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button stopSyncButton;

  @NonNull
  public final TextView syncCompletionStatusMessage;

  @NonNull
  public final ListView syncFailedResults;

  @NonNull
  public final ProgressBar syncProgressBar;

  @NonNull
  public final TextView syncProgressMessage;

  @NonNull
  public final ProgressBar syncWaitIndicator;

  private ActivitySyncStatusBinding(@NonNull ConstraintLayout rootView,
      @NonNull Button stopSyncButton, @NonNull TextView syncCompletionStatusMessage,
      @NonNull ListView syncFailedResults, @NonNull ProgressBar syncProgressBar,
      @NonNull TextView syncProgressMessage, @NonNull ProgressBar syncWaitIndicator) {
    this.rootView = rootView;
    this.stopSyncButton = stopSyncButton;
    this.syncCompletionStatusMessage = syncCompletionStatusMessage;
    this.syncFailedResults = syncFailedResults;
    this.syncProgressBar = syncProgressBar;
    this.syncProgressMessage = syncProgressMessage;
    this.syncWaitIndicator = syncWaitIndicator;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivitySyncStatusBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivitySyncStatusBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_sync_status, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivitySyncStatusBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.stopSyncButton;
      Button stopSyncButton = ViewBindings.findChildViewById(rootView, id);
      if (stopSyncButton == null) {
        break missingId;
      }

      id = R.id.syncCompletionStatusMessage;
      TextView syncCompletionStatusMessage = ViewBindings.findChildViewById(rootView, id);
      if (syncCompletionStatusMessage == null) {
        break missingId;
      }

      id = R.id.syncFailedResults;
      ListView syncFailedResults = ViewBindings.findChildViewById(rootView, id);
      if (syncFailedResults == null) {
        break missingId;
      }

      id = R.id.syncProgressBar;
      ProgressBar syncProgressBar = ViewBindings.findChildViewById(rootView, id);
      if (syncProgressBar == null) {
        break missingId;
      }

      id = R.id.syncProgressMessage;
      TextView syncProgressMessage = ViewBindings.findChildViewById(rootView, id);
      if (syncProgressMessage == null) {
        break missingId;
      }

      id = R.id.syncWaitIndicator;
      ProgressBar syncWaitIndicator = ViewBindings.findChildViewById(rootView, id);
      if (syncWaitIndicator == null) {
        break missingId;
      }

      return new ActivitySyncStatusBinding((ConstraintLayout) rootView, stopSyncButton,
          syncCompletionStatusMessage, syncFailedResults, syncProgressBar, syncProgressMessage,
          syncWaitIndicator);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
